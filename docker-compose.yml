version: '3.8'
services:
  fe:
    build:
      context: others/hackathon-fe
      args:
        DOCKER_BUILDKIT: 1
        GITHUB_TOKEN:
        NEXT_PUBLIC_API_URL: http://127.0.0.1:8093
    ports:
    - "8094:3000"
    depends_on:
      be:
        condition: service_started

  be:
    build:
      context: others/http-to-kafka
      args:
        DOCKER_BUILDKIT: 1
        GITHUB_TOKEN:
    environment:
      KAFKA_SERVER: gateway
      KAFKA_PORT: 6969
      KAFKA_TOPIC: customers
      HTTP_PORT: 8080
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    ports:
    - "8093:8080"
    depends_on:
      gateway:
        condition: service_started
      create-topics:
        condition: service_completed_successfully

  gateway:
    build:
      args:
        DOCKER_BUILDKIT: "1"
    restart: always
    depends_on:
    - schema-registry
    - vault
    ports:
    - "6969:6975"
    - "8888:8888"
    volumes:
    - type: bind
      source: ./others/gw-config/application.yaml
      target: /app/application.yaml
      read_only: true
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_SEND_BUFFER_BYTES: 1300000
      KAFKA_RECEIVE_BUFFER_BYTES: 1300000
      CONFIGURATION_FILE_PATH: /app/application.yaml

  kaf:
    build:
      context: others/kaf
      args:
        DOCKER_BUILDKIT: "1"
    command: sleep 360000

  vault:
    image: hashicorp/vault
    entrypoint:
    - vault
    - server
    - -dev
    restart: always
    ports:
    - "8092:8200"
    cap_add:
    - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_LOCAL_CONFIG: '{"storage": {"file": {"path": "/vault/file"}}, "listener": [{"tcp": { "address": "0.0.0.0:8200", "tls_disable": true}}], "default_lease_ttl": "168h", "max_lease_ttl": "720h", "ui": true}'

  vault-setup:
    image: hashicorp/vault
    depends_on:
    - vault
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root
    command:
    - sh
    - -c
    - "vault secrets enable -path=encryption transit && vault secrets enable -version=1 kv && vault write -f encryption/keys/gateway"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    restart: always
    depends_on:
    - kafka
    ports:
    - "8091:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    restart: always
    ports:
    - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: "confluentinc/cp-kafka:latest"
    depends_on:
    - zookeeper
    restart: always
    expose:
    - "9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
      KAFKA_BROKER_ID: 1

  create-topics:
    image: confluentinc/cp-kafka:latest
    restart: on-failure
    depends_on:
    - kafka
    - schema-registry
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 5 && \
                       kafka-topics --bootstrap-server kafka:9092 --create --topic customers --partitions 1 --replication-factor 1 --if-not-exists && \
                       sleep 3'"
